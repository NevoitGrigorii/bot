import logging
import os
import pandas as pd
import io
import mplfinance as mpf
from telegram import Update, InlineQueryResultArticle, InputTextMessageContent
from telegram.ext import Application, CommandHandler, ContextTypes, InlineQueryHandler
from binance.client import Client

# -------------------
#  –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # ‚úÖ –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑ ENV
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

binance_client = Client()
user_alerts = {}
all_binance_symbols = []

def populate_symbols_cache():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –∫–µ—à—É—î –≤—Å—ñ —Ç–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∏ –∑ Binance –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ."""
    global all_binance_symbols
    try:
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä –∑ Binance...")
        exchange_info = binance_client.get_exchange_info()
        all_binance_symbols = [s["symbol"] for s in exchange_info["symbols"] if s["status"] == "TRADING"]
        logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(all_binance_symbols)} –ø–∞—Ä.")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤: {e}")

def calculate_rsi(data: pd.Series, length: int = 14) -> pd.Series:
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î RSI –≤—Ä—É—á–Ω—É."""
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=length).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=length).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# -------------------
#  –ö–æ–º–∞–Ω–¥–∏
# -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ü—ñ–Ω –Ω–∞ Binance.\n\n"
        "üìà `/chart <–°–ò–ú–í–û–õ> <–Ü–ù–¢–ï–†–í–ê–õ> [–î–ù–Ü]`\n"
        "üîî `/alert <–°–ò–ú–í–û–õ> < > <–¶–Ü–ù–ê>`\n"
        "üìã `/my_alerts`\n"
        "üóëÔ∏è `/delete_alert <–ù–û–ú–ï–†>`"
    )

async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.inline_query.query.upper()
    if not query:
        return
    results = [s for s in all_binance_symbols if query in s]
    inline_results = [
        InlineQueryResultArticle(
            id=symbol,
            title=symbol,
            input_message_content=InputTextMessageContent(f"/chart {symbol} 1d"),
            description=f"–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ–Ω–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è {symbol}"
        )
        for symbol in results[:20]
    ]
    await update.inline_query.answer(inline_results, cache_time=10)

async def get_chart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: `/chart BTCUSDT 1d 90`")
            return

        symbol, interval = args[0].upper(), args[1].lower()
        days = int(args[2]) if len(args) > 2 else 30
        days = min(max(days, 1), 500)

        status_message = await update.message.reply_text(f"‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –¥–ª—è {symbol}...")

        klines = binance_client.get_historical_klines(symbol, interval, f"{days+50} day ago UTC")
        if not klines:
            await status_message.edit_text(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}.")
            return

        df = pd.DataFrame(klines, columns=["Open Time","Open","High","Low","Close","Volume","Close Time",
                                           "Quote Asset Volume","Number of Trades","Taker Buy Base Asset Volume",
                                           "Taker Buy Quote Asset Volume","Ignore"])
        df["Open Time"] = pd.to_datetime(df["Open Time"], unit="ms")
        df.set_index("Open Time", inplace=True)
        for col in ["Open","High","Low","Close","Volume"]:
            df[col] = pd.to_numeric(df[col])

        df["SMA_20"] = df["Close"].rolling(window=20).mean()
        df["SMA_50"] = df["Close"].rolling(window=50).mean()
        df["RSI_14"] = calculate_rsi(df["Close"], 14)

        df_to_plot = df.tail(days)
        ap = [
            mpf.make_addplot(df_to_plot["SMA_20"], panel=0, color="orange", width=0.7),
            mpf.make_addplot(df_to_plot["SMA_50"], panel=0, color="cyan", width=0.7),
            mpf.make_addplot(df_to_plot["RSI_14"], panel=2, color="purple", width=0.7, ylabel="RSI"),
            mpf.make_addplot([70]*len(df_to_plot), panel=2, color="red", linestyle="--", width=0.5),
            mpf.make_addplot([30]*len(df_to_plot), panel=2, color="green", linestyle="--", width=0.5)
        ]

        buf = io.BytesIO()
        mpf.plot(df_to_plot, type="candle", style="binance", title=f"{symbol} ({interval})",
                 ylabel="–¶—ñ–Ω–∞", volume=True, ylabel_lower="–û–±'—î–º", addplot=ap,
                 panel_ratios=(6,2,3), figratio=(16,9), savefig=dict(fname=buf, dpi=150))
        buf.seek(0)

        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=status_message.message_id)
        await update.message.reply_photo(photo=buf, caption=f"üìä {symbol} ({interval})", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥—Ä–∞—Ñ—ñ–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∞.")

# -------------------
#  –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# -------------------
def main():
    populate_symbols_cache()
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("chart", get_chart))
    app.add_handler(InlineQueryHandler(inline_query))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
